1. User can sign up

When the log in page is rendered, the location hash is set to sign in
When the user clicks on "Register Now" the hash changes to sign-up
This triggers a page re-render, which changes the text of the links and buttons to indicate that the user is signing up
Once the user submits a username and password, a POST request is sent to the server along the path '/api/auth/sign-up'
If a valid username and password has been sent, the password is hashed, and a db query is sent which inputs the username and password into the 'users' table.
The server then sends a response back to the client, and the hash is set to sign-in

2. User can sign in

When the user submits a username and password, a POST request is sent to the server along the /api/auth/sign-in path
A db query is sent and it looks for and returns the username and hashed password
if the username is not found, an error is thrown
The returned hashed password is verified to see if it matches the user inputted password
If it matches, a token is issued for the user, if not, an error is thrown
Then the user and token are returned, then App.handleSignIn() is called
The token is stored in the users local storage and a state change in App.state.user occurs, triggering a re-render
The hash is set to home
Since user is no longer 'null', the home page displays Rick Astley

3. User can stay signed in

Since the user's token is stored in local storage, if the page is rerendered, componentDidMount() will be called, and the token will be retrieved from local storage
This ensures the user value will not be 'null', and the home page will feature Rick Astley

4. User can sign out

When the user clicks 'Sign-out' in the nav bar, App.handleSignOut is called and the user's token is removed from local storage
This changes App.state.user, which triggers App to be rerendered
Since App.state.user = null, the user will be sent to the sign in page
